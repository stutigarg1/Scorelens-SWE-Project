Development Brief
Features: 
- User Authentication: Users can sign up, log in, and access data based on their role (like professor, student or admin).
- Course Management: Professors can create courses and view courses they are teaching.
- Student Enrollment: Students can enroll in courses.
- Score Management: Professors can upload scores for students in a course, and students can view their own scores and course statistics.
- Statistics: The system calculates average, minimum, maximum, and percentiles for student scores.

Technologies:
- Flask: A Python web framework for building the API.
- Flask-SQLAlchemy: An extension for Flask that adds support for SQLAlchemy, allowing the use of an SQLite database.
- Flask-Bcrypt: For hashing passwords securely.
- Flask-CORS: For enabling Cross-Origin Resource Sharing (CORS) in the API.
- Pandas: For processing and handling Excel files with student data.
- SQLite: Database used to store user data, courses, and scores.
- NumPy: For performing statistical calculations on the student scores.

Setup Instructions:
Requirements
- Python 3.x
- Flask
- Flask-SQLAlchemy
- Flask-Bcrypt
- Flask-CORS
- Pandas
- SQLite (built-in with Python)

Installation:
- Set up the SQLite database by running the app:
    cd src
    python app.py

Notes:
- The database is stored as site.db for general user information and student_scores.db for student scores.
- The Excel file for course creation should contain at least Name and Email columns for student enrollment.
- The scores file for uploading should have Name and Marks columns.
